function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

function updateCheckboxesFromQueryString(queryString) {
    if (queryString !== null && queryString.length > 0) {
        var items = queryString.split(',');
        items.forEach(function (element) {
            var correspondingInput = $('input[value="' + element.trim() + '"]');
            if (correspondingInput !== undefined && correspondingInput.length > 0) {
                correspondingInput.prop('checked', 'checked');
            }
        });
    }
}
function applyCategoryFilters(qsTitle) {
    var prefix = '?' + qsTitle + '=';
    var list = [];
    var qs = '';

    // User can uncheck boxes previously checked, otherwise they will stay in the query string
    $('.form-custom-checkbox input:checked').each(function () {
        var checkboxValue = $(this).val();
        list.push(checkboxValue);
    });

    var filterList = list.join(',');
    qs = prefix + filterList;

    window.location.href = window.location.protocol + "//" + window.location.host + window.location.pathname + qs;
}

function removeURLParameter(url, parameter) {
    //prefer to use l.search if you have a location/link object
    var urlparts = url.split('?');
    if (urlparts.length >= 2) {

        var prefix = encodeURIComponent(parameter) + '=';
        var pars = urlparts[1].split(/[&;]/g);

        //reverse iteration as may be destructive
        for (var i = pars.length; i-- > 0;) {
            //idiom for string.startsWith
            if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                pars.splice(i, 1);
            }
        }

        return urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : '');
    }
    return url;
}
